import{e as O,r as x,f as P,g as C,h as z,u as B,i as E,j as F,k as M}from"./entry.f8f67f34.js";const R=()=>null;function j(...s){var p,m,v,_,D,w,g,k,f;const u=typeof s[s.length-1]=="string"?s.pop():void 0;typeof s[0]!="string"&&s.unshift(u);let[t,o,e={}]=s;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof o!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=(p=e.server)!=null?p:!0,e.default=(m=e.default)!=null?m:R,e.defer&&console.warn("[useAsyncData] `defer` has been renamed to `lazy`. Support for `defer` will be removed in RC."),e.lazy=(_=(v=e.lazy)!=null?v:e.defer)!=null?_:!1,e.initialCache=(D=e.initialCache)!=null?D:!0,e.immediate=(w=e.immediate)!=null?w:!0;const a=O(),d=()=>(a.isHydrating||e.initialCache)&&a.payload.data[t]!==void 0;a._asyncData[t]||(a._asyncData[t]={data:x(d()?a.payload.data[t]:(k=(g=e.default)==null?void 0:g.call(e))!=null?k:null),pending:x(!d()),error:x((f=a.payload._errors[t])!=null?f:null)});const n={...a._asyncData[t]};n.refresh=n.execute=(c={})=>a._asyncDataPromises[t]?a._asyncDataPromises[t]:c._initial&&d()?a.payload.data[t]:(n.pending.value=!0,a._asyncDataPromises[t]=new Promise((i,r)=>{try{i(o(a))}catch(l){r(l)}}).then(i=>{e.transform&&(i=e.transform(i)),e.pick&&(i=A(i,e.pick)),n.data.value=i,n.error.value=null}).catch(i=>{var r,l;n.error.value=i,n.data.value=B((l=(r=e.default)==null?void 0:r.call(e))!=null?l:null)}).finally(()=>{n.pending.value=!1,a.payload.data[t]=n.data.value,n.error.value&&(a.payload._errors[t]=!0),delete a._asyncDataPromises[t]}),a._asyncDataPromises[t]);const y=()=>n.refresh({_initial:!0}),b=e.server!==!1&&a.payload.serverRendered;{const c=E();if(c&&!c._nuxtOnBeforeMountCbs){c._nuxtOnBeforeMountCbs=[];const r=c._nuxtOnBeforeMountCbs;c&&(P(()=>{r.forEach(l=>{l()}),r.splice(0,r.length)}),C(()=>r.splice(0,r.length)))}b&&a.isHydrating&&t in a.payload.data?n.pending.value=!1:c&&(a.payload.serverRendered&&a.isHydrating||e.lazy)&&e.immediate?c._nuxtOnBeforeMountCbs.push(y):e.immediate&&y(),e.watch&&z(e.watch,()=>n.refresh());const i=a.hook("app:data:refresh",r=>{if(!r||r.includes(t))return n.refresh()});c&&C(i)}const h=Promise.resolve(a._asyncDataPromises[t]).then(()=>n);return Object.assign(h,n),h}function A(s,u){const t={};for(const o of u)t[o]=s[o];return t}function T(s,u,t){const[o={},e]=typeof u=="string"?[{},u]:[u,t],a=o.key||e;if(!a||typeof a!="string")throw new TypeError("[nuxt] [useFetch] key must be a string: "+a);if(!s)throw new Error("[nuxt] [useFetch] request is missing.");const d="$f"+a,n=F(()=>{let f=s;return typeof f=="function"&&(f=f()),M(f)?f.value:f}),{server:y,lazy:b,default:h,transform:p,pick:m,watch:v,initialCache:_,...D}=o,w={...D,cache:typeof o.cache=="boolean"?void 0:o.cache},g={server:y,lazy:b,default:h,transform:p,pick:m,initialCache:_,watch:[n,...v||[]]};return j(d,()=>$fetch(n.value,w),g)}export{T as u};
